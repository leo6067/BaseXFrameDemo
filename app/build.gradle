plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'android-junk-code'
}


apply from: "channels_config.gradle"

// 加载 gradle.properties 资源
Properties myProperties = new Properties()
InputStream inputStream = project.rootProject.file('ParameterConfiguration.properties').newDataInputStream();
InputStreamReader isr = new InputStreamReader(inputStream, "UTF-8");
BufferedReader br = new BufferedReader(isr);
myProperties.load(br)




androidJunkCode {
    def config = {
        //变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
        packageBase = myProperties.getProperty('appPackName') //生成java类根包名
        packageCount = 50 //生成包数量
        activityCountPerPackage = 50 //每个包下生成Activity类数量
        excludeActivityJavaFile = false
        //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
        otherCountPerPackage = 50 //每个包下生成其它类的数量
        methodCountPerClass = 50 //每个类下生成方法数量
        resPrefix = "sjxm"//生成的layout、drawable、string等资源名前缀
        drawableCount = 30 //生成drawable资源数量
        stringCount = 300  //生成string数量
    }

    variantConfig {
        debug config
        release config
    }
}


android {

    compileSdk 31
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 31

        flavorDimensions "1.0"
        renderscriptTargetApi 28
        renderscriptSupportModeEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk {
            // 设置支持的 SO 库构架
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        //配置resConfigs 只打包默认与简体中文资源。
//        resConfigs "zh-rCN", "en-rGB", "th-rTH", "zh-rTW", "es-rES", "pt-rPT"

        resValue "string", "AES_KEY", myProperties.getProperty('AES_KEY')
        resValue "string", "AES_SECRET", myProperties.getProperty('AES_SECRET')
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //配置java 版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //此处添加你要过滤。重复文件
    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

}


dependencies {
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    testImplementation 'junit:junit:4.+'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'


    implementation project(path: ':XFramework')
    implementation fileTree(dir: 'libs', include: ['*.aar', '*.jar'])


    //阿里路由
    api 'com.alibaba:arouter-api:1.5.1'
    kapt 'com.alibaba:arouter-compiler:1.5.1'


    //圆形菜单
    implementation 'com.github.D10NGYANG:DL10RoundMenuView:1.0.9'


    implementation 'com.facebook.shimmer:shimmer:0.5.0@aar'


    // 投屏
    implementation 'com.connectsdk:connect-sdk-android:1.6.0'


    //room 数据库
    String room_version = "2.4.0"
    implementation("androidx.room:room-runtime:$room_version")
    kapt("androidx.room:room-compiler:$room_version")


    //打星
    implementation 'com.xingliuhua:xlhratingbar_lib:4.0'


    //广告
    implementation 'com.google.android.gms:play-services-ads:21.0.0'
    implementation 'com.google.ads.mediation:facebook:6.11.0.1'


    //本地搭建服务端
    api 'org.nanohttpd:nanohttpd:2.3.1'

}
